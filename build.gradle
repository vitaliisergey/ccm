apply plugin: 'java'
apply plugin: 'war'

String major = "1"
String minor = "0"
String revision = "0"

def springVersion = '4.3.6.RELEASE'
def springDataJPAVersion = '1.11.0.RELEASE'
def postgresqlJdbcVersion = '9.4.1212.jre7'
def jacksonVersion = '2.8.6'
def slf4jVersion = '1.7.22'
def hibernateVersion = '5.2.7.Final'
def hibernateValidationVersion = '5.4.0.Final'
def junitVersion = '4.12'
def commonsDbcpVersion = '2.1.1'
def commonsCollectionsVersion = '4.1'
def commonsLang3Version = '3.5'
def elApiVersion = '3.0.0'
def tomcatVersion = '9.0.0.M15'
def juliVersion = '6.0.48'
def c3p0Version = '0.9.5.2'
def flywaydbVersion = '4.0.3'
def javaxSAVersion = '3.1.0'
def logbackVersion = '1.1.9'
def groovyVersion = '2.4.8'
def hamcrestVersion = '1.3'
def jsonPathVersion = '1.2.0'
def mockitoVersion = '1.+'
def jsonAssertVersion = '1.4.0'

group = 'by.intexsoft'
version = new Version(version_major : major, version_minor: minor, revision: revision , releaseType: 'RELEASE')

class Version {
    String version_major
    String version_minor
    String revision
    String releaseType
    String toString() {
    "$version_major.$version_minor.$revision-$releaseType"
    }
}

sourceSets {
    generated {
        java {
            srcDirs = ['build/generated']
        }
    }
}

configurations {
    jpamodelgen
}

dependencies {
    //apache
    compile "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
    compile "org.apache.commons:commons-lang3:$commonsLang3Version"
    //spring
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework.data:spring-data-jpa:$springDataJPAVersion"
    //jackson
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:$jacksonVersion"
    //database
    compile "org.postgresql:postgresql:$postgresqlJdbcVersion"
    compile "org.apache.commons:commons-dbcp2:$commonsDbcpVersion"
    compile "com.mchange:c3p0:$c3p0Version"
    //hibernate
    compile "org.hibernate:hibernate-core:$hibernateVersion"
    compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
    compile "org.hibernate:hibernate-validator:$hibernateValidationVersion"
    compile "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"
    //flyway
    compile "org.flywaydb:flyway-core:$flywaydbVersion"
    //slf4j
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    //logback
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.codehaus.groovy:groovy:$groovyVersion"
    //only build
    providedCompile "javax.el:javax.el-api:$elApiVersion"
    providedCompile "javax.servlet:javax.servlet-api:$javaxSAVersion"
    //TEST
    testCompile "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
    testCompile "org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion"
    testCompile "org.apache.tomcat:juli:$juliVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "javax.el:javax.el-api:$elApiVersion"
    testCompile "javax.servlet:javax.servlet-api:$javaxSAVersion"
    testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testCompile "com.jayway.jsonpath:json-path:$jsonPathVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.skyscreamer:jsonassert:$jsonAssertVersion"
}

task generateMetamodel(type: JavaCompile) {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.jpamodelgen
    options.compilerArgs = ["-proc:only"]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava.dependsOn generateMetamodel

war {
    archiveName = 'ccm-test.war'
}

test {
    include 'by/intexsoft/ccm/AllTests.*'
    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }
}

repositories {
    mavenCentral()
}